import java.util.Scanner;

public class IntermediateCourse {
  private static final Scanner CONSOLE = new Scanner(System.in);
  private static String userInput;

  public static void learnOperators(){
    
    HelperFunctions.printAnimated("There are many different types of operators available to be used in Java. They are classified based on the functionality they provide. You will learn about the following operators: arithmetic, assignment, relational, and logical.\n");

    HelperFunctions.printAnimated( HelperFunctions.ANSI_RED + "Arithmetic operators:\n'+':" + HelperFunctions.ANSI_GREEN + " adds 2 values together"+ HelperFunctions.ANSI_BLUE + " ex: x+y" + HelperFunctions.ANSI_RED + "\n'-':" + HelperFunctions.ANSI_GREEN + " subtracts 2 values"+ HelperFunctions.ANSI_BLUE + " ex: x-y" + HelperFunctions.ANSI_RED + "\n'*':" + HelperFunctions.ANSI_GREEN + " multiplies 2 values "+ HelperFunctions.ANSI_BLUE + " ex: x*y" + HelperFunctions.ANSI_RED + "\n'/':" + HelperFunctions.ANSI_GREEN + " divides 2 values"+ HelperFunctions.ANSI_BLUE + " ex: x/y" + HelperFunctions.ANSI_RED + "\n'%':" + HelperFunctions.ANSI_GREEN + " (modulus operator) returns the remainder of 2 values"+ HelperFunctions.ANSI_BLUE + " ex: x%y" + HelperFunctions.ANSI_RED + "\n'++':" + HelperFunctions.ANSI_GREEN + " increments the value of a variable by 1" + HelperFunctions.ANSI_BLUE + " ex: x++" + HelperFunctions.ANSI_RED + "\n'--':" + HelperFunctions.ANSI_GREEN + " decrements the value of a variable by 1" + HelperFunctions.ANSI_BLUE + " ex: x--" + HelperFunctions.ANSI_RESET);

    HelperFunctions.printAnimated(HelperFunctions.ANSI_RED + "Assignment operators:\n'=':" + HelperFunctions.ANSI_GREEN + " assign a value to any variable" + HelperFunctions.ANSI_BLUE + " ex: x=y" + HelperFunctions.ANSI_RED + "\n'+=':" + HelperFunctions.ANSI_GREEN + " adds a value to a variable" + HelperFunctions.ANSI_BLUE + " ex: x+=y" + HelperFunctions.ANSI_RED + "\n'-=':" + HelperFunctions.ANSI_GREEN + " subtracts a value from a variable" + HelperFunctions.ANSI_BLUE + " ex: x-=y" + HelperFunctions.ANSI_RED + "\n'*=':" + HelperFunctions.ANSI_GREEN + " multiplies a variable by a value" + HelperFunctions.ANSI_BLUE + " ex: x*=y" + HelperFunctions.ANSI_RED + "\n'/=':" + HelperFunctions.ANSI_GREEN + " divides a variable by a value " + HelperFunctions.ANSI_BLUE + " ex: x/=y" + HelperFunctions.ANSI_RESET);

    HelperFunctions.printAnimated(HelperFunctions.ANSI_RED + "Relational operators:\n'==':" + HelperFunctions.ANSI_GREEN + " checks if 2 values are equal " + HelperFunctions.ANSI_BLUE + " ex:" + HelperFunctions.ANSI_RED + " System.out.println(x == y)\n'!=':" + HelperFunctions.ANSI_GREEN + " checks if 2 values are not equal " + HelperFunctions.ANSI_BLUE + " ex:" + HelperFunctions.ANSI_RED + " System.out.println(x!=y)\n'<:'" + HelperFunctions.ANSI_GREEN + " checks if a value is less than another " + HelperFunctions.ANSI_BLUE + " ex:" + HelperFunctions.ANSI_RED + " System.out.println(x<y)\n'>:'" + HelperFunctions.ANSI_GREEN + " checks if a value is greater than another " + HelperFunctions.ANSI_BLUE + " ex:" + HelperFunctions.ANSI_RED + " System.out.println(x>y)\n'<=':" + HelperFunctions.ANSI_GREEN + " checks if a value is less than or equal to another " + HelperFunctions.ANSI_BLUE + " ex:" + HelperFunctions.ANSI_RED + " System.out.println(x<=y)\n'>='" + HelperFunctions.ANSI_GREEN + " checks if a value is greater than or equal to another " + HelperFunctions.ANSI_BLUE + " ex:" + HelperFunctions.ANSI_RED + " System.out.println(x>=y)" + HelperFunctions.ANSI_RESET);

    HelperFunctions.printAnimated( HelperFunctions.ANSI_RED + "Logical operators:\n'&&' (AND):" + HelperFunctions.ANSI_GREEN + " checks if 2 conditons are true" + HelperFunctions.ANSI_BLUE + " ex:" + HelperFunctions.ANSI_RED + " System.out.println(x && y)\n'||' (OR):" + HelperFunctions.ANSI_GREEN + " checks if 1 of 2 conditons are true" + HelperFunctions.ANSI_BLUE + " ex:" + HelperFunctions.ANSI_RED + " System.out.println(x || y)\n'!' (NOT):" + HelperFunctions.ANSI_GREEN + " changes the returned value of a conditon (false when true and true when false" + HelperFunctions.ANSI_BLUE + " ex:" + HelperFunctions.ANSI_RED + " System.out.println(!x)\n" + HelperFunctions.ANSI_RESET + "\nLogical operators are used in conditionals which you will learn about in the next lesson\nTake a look at the" + HelperFunctions.ANSI_RED + " 'Operators.java'" + HelperFunctions.ANSI_RESET + "in the" + HelperFunctions.ANSI_RED + " 'Intermediate Course'" + HelperFunctions.ANSI_RESET + " folder for more examples on these operators. Type 'ok' when you are ready to continue onto the next lesson about conditionals.\n");

    HelperFunctions.waitForCorrectInput("ok", "Type 'ok' when you are ready to continue!\n",false);
    HelperFunctions.updateProgress("activityProgress.txt", "learnConditionals");
    learnConditionals();
}  

  public static void learnConditionals(){
    HelperFunctions.printAnimated("Conditonals are expressions that evaluate to 'true' or 'false' and execute code based on the result. You will learn about the following conditionals: if, and if-else.\n");

    HelperFunctions.printAnimated("There are times when you need to execute code based on a condition/situation. For example, if you want to add coins to a player's inventory, you need to use a conditional to check if the player has touched a coin and then add it to their inventory. You can use an if statement for this. If statements are the most basic conditional statements and execute when a condition is met/true. The syntax for an if statement is as follows:\n" + HelperFunctions.ANSI_RED + "if(some condition)\n{\n  exectue following code\n}\n" + HelperFunctions.ANSI_RESET + "Inside of the parentheses, you can put any condition that evaluates to true or false. For example, you can check if a variable is greater than 5 by using the operators you learned about in the previous lesson. Inside the curly braces, you can put any code that you want to execute when the condition is met. Examine this code and predict what it will print once it has finished executing.\n" + HelperFunctions.ANSI_RED + "int x = 5;\nif(x > 3)\n{\n  x++;\n  System.out.println(x);\n}\n" + HelperFunctions.ANSI_RESET);

    HelperFunctions.waitForCorrectInput("6", false);

    HelperFunctions.printAnimated("Correct!\nThe code above will print 6 because the condition is true and the code inside the curly braces increments the value of x by 1 and prints it.If the condition was false such as\n" + HelperFunctions.ANSI_RED + "if(x < 3)\n" + HelperFunctions.ANSI_RESET + "then the code inside the curly braces would not execute. Sometimes we want to execute code if the condtion is not met/true. For example, we may want to decrease the value of x in the above example if x < 3. To do this we can use else statements. Else statements are used after an if statement and execute when the condition is not met/true and the if statement is not executed. The syntax for an else statement is as follows:\n" + HelperFunctions.ANSI_RED + "if(some condiiton)\n{\n  execute following code\n}\nelse\n{\n  execute following code as none of the if conditions are met\n}\n" + HelperFunctions.ANSI_RESET + "Notice that the else statement does not have a condition. This is because the else statement is executed if none of the if condiitons are met and therefore requires no condition." + HelperFunctions.ANSI_GREEN + "The 'if' in if-else statements checks if a condition is met/true and executes the code inside the curly braces if it is. The 'else' in if-else  statements executes when none of the 'if' conditions are met/true and executes the code inside the curly braces." + HelperFunctions.ANSI_RESET + "Examine the following code and perdict what will happen once it executes\n" + HelperFunctions.ANSI_RED + "int x = 1;\nif(x > 3)\n{\n  x++;\n  System.out.println(x);\n}\nelse\n{\n  x--;\n  System.out.println(x);\n}\n" + HelperFunctions.ANSI_RESET);

  HelperFunctions.waitForCorrectInput("0", false);

  HelperFunctions.printAnimated("Correct!\nThe code above will print 0 because the condition is false and the code inside the else statement decrements x by 1 and prints it. Sometimes we want to check if multiple conditons are true. In the previous example, we may want to multiply the value of x by a number if it equals 3. To do this we can use an 'else if' statement. Else if statement combine the functionality of 'if and 'else' statements. Here is the syntax for else if statements:\n" + HelperFunctions.ANSI_RED + "if(some condition)\n{\n  execute following code\n}\nelse if (some other condition)\n{\n  execute following code\n}\nelse\n{\n  execute following code if none of the 'if' conditions are met\n}\n" + HelperFunctions.ANSI_RESET + "This code will first check the  'if' condition, if it is not met/true, it will check the 'else if' condition and if it is not met/true, it will execute the else statement. Examine the following code and predict what will happen once it executes\n" + HelperFunctions.ANSI_RED + "int x = 3;\nif(x > 3)\n{\n  x++;\n  System.out.println(x);\n}\nelse if (x == 3)\n{\n  System.out.println(x);\n}\nelse\n{\n  x--;\n  System.out.println(x);\n}\n" + HelperFunctions.ANSI_RESET);

     HelperFunctions.waitForCorrectInput("3", false);

    HelperFunctions.printAnimated("Correct!\nThe code above will print 3 because the first condition is not true, so the 'else if' statement is checked and the condition is true. The code inside the 'else if' statement is executed and it prints the value of x. Here is another piece of code for you to examine and predict what will happen once it executes\n" + HelperFunctions.ANSI_RED + "int x = 5;\nif(x > 8)\n{\n  x++;\n  System.out.println(x);\n}\nelse if (x != 5)\n{\n  System.out.println(x);\n}\nelse if ( x > 3)\n{\n  x--;\n  System.out.println(x);\n}\nelse\n{\n  x *= 10;\n  System.out.println(x);\n}\n" + HelperFunctions.ANSI_RESET);

    HelperFunctions.waitForCorrectInput("4", false);

    HelperFunctions.printAnimated("Correct!\nThe code above will print 4 because the first condition is not true, so it checks the second condition which is also not true, so it checks the third condition which is true. The code inside the second 'else if' statement is executed and it decrements the value of x by 1 and prints it. Here is another piece of code for you to examine and predict what will happen once it executes\n" + HelperFunctions.ANSI_RED + "int age = 16;\nif(age < 10 || age >= 16)\n{\n  age += 4;\n}\nif(age > 25)\n{\n  age -= 2;\n}\nelse if (age > 15)\n{\n  age++;\n  System.out.println(age)\n}\n" + HelperFunctions.ANSI_RESET);

    HelperFunctions.waitForCorrectInput("21", false);

    HelperFunctions.printAnimated("Correct!\nThe code above will print 21 because the first 'if' condition is true, adds 4 to age which makes age = 20. There is a second if condition after the first one so it will also execute. The condition 'age > 25' is not true so it checks the else if statement which is true as age > 15. The code executes and adds 1 to age which makes age = 21 and prints it.\nWe can also have if statements inside of if statements. These are known as 'nested if statements'. They can get complicated easily so dont worry if you cant fully understand them. Here is an example of a nested if statement:\n" + HelperFunctions.ANSI_RED + "if(some condition)\n{\n  if(another condition)\n  {\n    execute code\n  }\n  else\n  {\n    execute code\n  }\n}\nelse\n{\n  execute code because first 'if' condition was not true\n}" + HelperFunctions.ANSI_RESET + "Here is a nested if statement, try to guess what will happen once it executes\n" + HelperFunctions.ANSI_RED + "int x = 5;\nif");
  }
  
  public static void launchIntermediateCourse() {
      HelperFunctions.clearConsole();
      HelperFunctions.printAnimated("Welcome to the intermediate course! This course will teach you the basics of Java, such as operators, conditionals, methods, string methods, arrays, and ArrayList, loops, classes, and objects  ");
    HelperFunctions.updateProgress("activityProgress.txt", "learnOperators");
    learnOperators();
  }
}